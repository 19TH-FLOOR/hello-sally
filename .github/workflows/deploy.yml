name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  GITHUB_REPOSITORY: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      api-changed: ${{ steps.changes.outputs.api }}
      admin-changed: ${{ steps.changes.outputs.admin }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect changes
        id: changes
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -E '^api-server/'; then
            echo "api=true" >> $GITHUB_OUTPUT
          else
            echo "api=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -E '^admin-dashboard/'; then
            echo "admin=true" >> $GITHUB_OUTPUT
          else
            echo "admin=false" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set lower-case repository env
        id: set-repo-lc
        run: |
          repo_lc=$(echo '${{ github.repository }}' | tr '[:upper:]' '[:lower:]')
          echo "GITHUB_REPOSITORY_LC=$repo_lc" >> $GITHUB_ENV
          echo "repo_lc=$repo_lc" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for API Server
        if: needs.detect-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch'
        id: meta-api
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.set-repo-lc.outputs.repo_lc }}/api-server
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push API Server
        if: needs.detect-changes.outputs.api-changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: ./api-server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-api.outputs.tags }}
          labels: ${{ steps.meta-api.outputs.labels }}
          cache-from: type=gha,scope=api-server
          cache-to: type=gha,mode=max,scope=api-server

      - name: Extract metadata for Admin Dashboard
        if: needs.detect-changes.outputs.admin-changed == 'true' || github.event_name == 'workflow_dispatch'
        id: meta-admin
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.set-repo-lc.outputs.repo_lc }}/admin-dashboard
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Admin Dashboard
        if: needs.detect-changes.outputs.admin-changed == 'true' || github.event_name == 'workflow_dispatch'
        uses: docker/build-push-action@v5
        with:
          context: ./admin-dashboard
          file: ./admin-dashboard/Dockerfile.prod
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta-admin.outputs.tags }}
          labels: ${{ steps.meta-admin.outputs.labels }}
          cache-from: type=gha,scope=admin-dashboard
          cache-to: type=gha,mode=max,scope=admin-dashboard

  deploy:
    needs: [detect-changes, build-and-push]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (needs.detect-changes.outputs.api-changed == 'true' || needs.detect-changes.outputs.admin-changed == 'true' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 프로젝트 디렉토리로 이동 및 생성
            PROJECT_DIR="/home/${{ secrets.EC2_USERNAME }}/hello-sally"
            mkdir -p $PROJECT_DIR && cd $PROJECT_DIR
            
            # Git 저장소 클론 또는 업데이트
            if [ ! -d ".git" ]; then
              echo "📥 Cloning repository..."
              # GitHub Actions의 GITHUB_TOKEN을 사용해 인증하여 클론 (private repo 지원)
              git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git .
            else
              echo "🔄 Updating repository..."
              git fetch origin && git reset --hard origin/main
            fi
            
            # 환경 변수 로드
            echo "🔑 Loading environment variables from Parameter Store..."
            # 레포지토리명을 소문자로 변환하여 통일
            REPO_LC=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
            export GITHUB_REPOSITORY="$REPO_LC"
            ./scripts/load-env.sh && source /tmp/prod-env
            
            # GitHub Container Registry 로그인
            echo "🐳 Logging in to GHCR..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 변경된 서비스만 이미지 Pull
            if [ "${{ needs.detect-changes.outputs.api-changed }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "⬇️ Pulling API Server image..."
              docker pull ghcr.io/${GITHUB_REPOSITORY}/api-server:latest
            fi
            
            if [ "${{ needs.detect-changes.outputs.admin-changed }}" = "true" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
              echo "⬇️ Pulling Admin Dashboard image..."
              docker pull ghcr.io/${GITHUB_REPOSITORY}/admin-dashboard:latest
            fi
            
            echo "🚀 Deploying services..."
            source /tmp/prod-env && docker-compose -f docker-compose.prod.yml down --remove-orphans
            source /tmp/prod-env && docker-compose -f docker-compose.prod.yml up -d
            
            # 헬스 체크
            echo "🏥 Performing health check..."
            sleep 30
            
            if curl -f http://localhost:8000/ > /dev/null 2>&1; then
              echo "✅ API Server is healthy"
            else
              echo "❌ API Server health check failed" && exit 1
            fi
            
            if curl -f http://localhost:3000/ > /dev/null 2>&1; then
              echo "✅ Admin Dashboard is healthy"
            else
              echo "❌ Admin Dashboard health check failed" && exit 1
            fi
            
            # 정리
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            echo "🎉 Deployment completed successfully!"
            docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"